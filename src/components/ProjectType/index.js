import React from 'react';
import {NavLink, Route, Switch} from "react-router-dom";

export default function ProjectType() {
  return (
    <>
      <ul className="nav nav-tabs">
        <li className="nav-item">
          <NavLink className="nav-link" to="/project_type/simple">Простое приложение</NavLink>
        </li>
        <li className="nav-item">
          <NavLink className="nav-link" to="/project_type/dynamic">Динамическое приложение</NavLink>
        </li>
        <li className="nav-item">
          <NavLink className="nav-link" to="/project_type/pwa">PWA</NavLink>
        </li>
        <li className="nav-item">
          <NavLink className="nav-link" to="/project_type/commerce">Онлайн магазин/E-commerce</NavLink>
        </li>
        <li className="nav-item">
          <NavLink className="nav-link" to="/project_type/mono">Монорепозиторий</NavLink>
        </li>
      </ul>
      <Switch>
        <Route path='/project_type/pwa' exact>
          <div className='border border-light p-3 mb-3 rounded shadow' style={{maxWidth: '650px'}}>
            Для разработки прогрессивного веб-приложения, основной файл
            которого в итоге может храниться в памяти, чтобы обеспечить автономный
            режим работы, целесообразно использовать технологии, которые занимали бы
            меньше всего места. Для таких целей Vue и React будет хорошим выбором.
            Однако если само по себе приложение не может не занимать много места,
            ввиду своего масштаба, и при этом требуется жесткая архитектура
            приложения и хорошо поддерживаемая экосистема, то допускается
            использовать Angular.
          </div>
        </Route>
        <Route path='/project_type/dynamic' exact>
          <div className='border border-light p-3 mb-3 rounded shadow' style={{maxWidth: '650px'}}>
            Наилучшим выбором для разработки динамических приложений является
            React, так как он предоставляет широкий выбор разных дополнительных
            пакетов со стороны сообщества, которые позволяют найти быстрое решение
            большинства задач. Кроме того, можно найти большое количество
            образовательного материала или вопросов, касающихся проблем процесса
            разработки.
            При желании иметь легковесное решение с развитой экосистемой
            фреймворка, не полагаясь на разработки сообщества, то можно использовать
            Vue. Если вместо гибкости требуется жесткая структура приложения и
            разработка проекта ведется большой командой разработки с текучкой кадров,
            то для разработки динамического сайта рекомендуется использовать
            фреймворк Angular.
          </div>
        </Route>
        <Route path='/project_type/commerce' exact>
          <div className='border border-light p-3 mb-3 rounded shadow' style={{maxWidth: '650px'}}>
            При разработке веб-продуктов электронной коммерции следует уделять
            особое внимание вопросам безопасности. Проекты данного вида должны быть
            защищены от разного рода уязвимостей по типу межсайтового скриптинга
            (XXS). Особый акцент на данный вопрос следует сделать при
            имплиментации серверного рендеринга. Если основной задачей является
            сделать приложение как можно более безопасным, то следует присмотреться
            к фреймворку Angular, который имеет встроенные способы защиты и
            регулярно ведет работу над обновлением своих пакетов, уделяя внимание
            вопросам безопасности.
            В случае с React есть специальные методы, которые в своём названии
            содержат предостережения в их использовании, так как могут повлечь за собой
            неблагоприятные последствия. Кроме того, будет небезопасно
            использовать любые попавшиеся пакеты и библиотеки, которые сделаны
            неизвестными разработчиками. Поэтому при разработке интернет-магазинов
            и проектов электронной коммерции на React, следует уделять дополнительное
            внимание вопросам безопасности и грамотно подходить к проектированию
            архитектуры приложения.
          </div>
        </Route>
        <Route path='/project_type/mono' exact>
          <div className='border border-light p-3 mb-3 rounded shadow' style={{maxWidth: '650px'}}>Работа в монорепозитории нуждается в более гибком и легковесном решении для
              снижения общей нагрузки на кодовую базу репозитория. Такими решениями
              могут выступить React и Vue. Однако Angular подходит для больших проектов
              в целом. В связи с чем рекомендуется использоваться фреймворк Angular для
              разработки крупных проектов в полирепозитории или при использовании
              гибридных моделей.
            </div>
        </Route>
        <Route path='/project_type/simple' exact>
          <div className='border border-light p-3 mb-3 rounded shadow' style={{maxWidth: '650px'}}>
            При разработке одностраничных сайтов для целей маркетинга или
            представления рекомендуется использовать фреймворк Vue. Данное решение
            максимально приближено к классическому походу разделения JS логики, CSS
            стилей и HTML разметки, что хорошо подходит для такого вида небольших
            проектов. Так как данный инструмент можно использовать по CDN-ссылке, то
            он позволяет в самые короткие сроки начать работу. Его легковесность и
            высокая скорость работы позволит сохранить нужную производительность
            итогового проекта, при этом получить комфортную среду для разработки,
            относительно чистого JavaScript. При необходимости расширения сайта
            представления в дальнейшем, Vue также будет хорошим решением под
            данную задачу.
          </div>
          
        </Route>
      </Switch>
    </>
  )
}
